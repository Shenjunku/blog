(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{413:function(t,v,_){"use strict";_.r(v);var a=_(2),s=Object(a.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h3",{attrs:{id:"游览器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#游览器"}},[t._v("#")]),t._v(" 游览器")]),t._v(" "),v("h4",{attrs:{id:"浏览器从输入url到渲染页面-发生了什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#浏览器从输入url到渲染页面-发生了什么"}},[t._v("#")]),t._v(" 浏览器从输入url到渲染页面，发生了什么？")]),t._v(" "),v("h5",{attrs:{id:"通过dns解析域名的实际ip地址"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#通过dns解析域名的实际ip地址"}},[t._v("#")]),t._v(" 通过DNS解析域名的实际IP地址")]),t._v(" "),v("h5",{attrs:{id:"检查浏览器是否有缓存"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#检查浏览器是否有缓存"}},[t._v("#")]),t._v(" 检查浏览器是否有缓存")]),t._v(" "),v("h5",{attrs:{id:"与服务器建立-tcp-连接。"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#与服务器建立-tcp-连接。"}},[t._v("#")]),t._v(" 与服务器建立 TCP 连接。")]),t._v(" "),v("h5",{attrs:{id:"发送http请求"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#发送http请求"}},[t._v("#")]),t._v(" 发送HTTP请求")]),t._v(" "),v("h5",{attrs:{id:"服务器处理请求并返回"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#服务器处理请求并返回"}},[t._v("#")]),t._v(" 服务器处理请求并返回")]),t._v(" "),v("h5",{attrs:{id:"浏览器解析渲染页面"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#浏览器解析渲染页面"}},[t._v("#")]),t._v(" 浏览器解析渲染页面")]),t._v(" "),v("ul",[v("li",[t._v("解析HTML形成DOM树")]),t._v(" "),v("li",[t._v("解析CSS形成CSSOM 树")]),t._v(" "),v("li",[t._v("合并DOM树和CSSOM树形成渲染树")]),t._v(" "),v("li",[t._v("浏览器开始渲染并绘制页面")])]),t._v(" "),v("h4",{attrs:{id:"游览器缓存机制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#游览器缓存机制"}},[t._v("#")]),t._v(" 游览器缓存机制")]),t._v(" "),v("h5",{attrs:{id:"http缓存可以分为两大类-强制缓存-也称强缓存-和协商缓存。两类缓存规则不同-强制缓存在缓存数据未失效的情况下-不需要再和服务器发生交互-而协商缓存-顾名思义-需要进行比较判断是否可以使用缓存。"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http缓存可以分为两大类-强制缓存-也称强缓存-和协商缓存。两类缓存规则不同-强制缓存在缓存数据未失效的情况下-不需要再和服务器发生交互-而协商缓存-顾名思义-需要进行比较判断是否可以使用缓存。"}},[t._v("#")]),t._v(" Http缓存可以分为两大类，强制缓存（也称强缓存）和协商缓存。两类缓存规则不同，强制缓存在缓存数据未失效的情况下，不需要再和服务器发生交互；而协商缓存，顾名思义，需要进行比较判断是否可以使用缓存。")]),t._v(" "),v("p",[t._v("两类缓存规则可以同时存在，强制缓存优先级高于协商缓存，也就是说，当执行强制缓存的规则时，如果缓存生效，直接使用缓存，不再执行协商缓存规则。")]),t._v(" "),v("h5",{attrs:{id:"强缓存"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#强缓存"}},[t._v("#")]),t._v(" 强缓存：")]),t._v(" "),v("ol",[v("li",[t._v("网站向服务器发送请求 ，")]),t._v(" "),v("li",[t._v("游览器返回相对资源例如css文件js文件图片资源，")]),t._v(" "),v("li",[t._v("服务器在响应头 （response（瑞思棒死） headers ）设置Cache-Control(卡奇-砍凑) max-age设置一个时间，")]),t._v(" "),v("li",[t._v("如果后面再次请求这个接口，判断时间有没有过期，没过期直接从缓存里拿资源，过期的话会从新返回新的资源")])]),t._v(" "),v("h5",{attrs:{id:"协商缓存"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[t._v("#")]),t._v(" 协商缓存：")]),t._v(" "),v("ol",[v("li",[t._v("网站向服务器发送请求 ，")]),t._v(" "),v("li",[t._v("游览器返回相对资源（例如css文件js文件图片资源）和资源标识，")]),t._v(" "),v("li",[t._v("后续如果重新请求，请求会带上次的资源标识，服务器判断当前资源和游览器资源是否一致，")]),t._v(" "),v("li",[t._v("如何不是最新资源，服务器返回200状态码、最新资源和新的资源标识，")]),t._v(" "),v("li",[t._v("如何是最新资源，服务器返回304状态码，直接从缓存里拿缓存。")])]),t._v(" "),v("h5",{attrs:{id:"资源标识分为两种-last-modified-猫丢fail的-和etag-e他哥"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#资源标识分为两种-last-modified-猫丢fail的-和etag-e他哥"}},[t._v("#")]),t._v(" 资源标识分为两种，Last-Modified（猫丢fail的）和ETag(E他哥)")]),t._v(" "),v("h5",{attrs:{id:"last-modified-文件上次修改时间-资源文件在服务器最后被修改的时间。"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#last-modified-文件上次修改时间-资源文件在服务器最后被修改的时间。"}},[t._v("#")]),t._v(" Last-Modified：文件上次修改时间（资源文件在服务器最后被修改的时间。）")]),t._v(" "),v("ul",[v("li",[t._v("浏览器请求静态资源")]),t._v(" "),v("li",[t._v("服务器返回资源给浏览器，同时带上文件上次修改时间 Last-Modified（GMT标准格式）")]),t._v(" "),v("li",[t._v("当浏览器上的缓存文件过期时或者从新发起该请求，浏览器带上请求头"),v("code",[t._v("If-Modified-Since")]),t._v("（等于上一次请求的Last-Modified）请求服务器")]),t._v(" "),v("li",[t._v("服务器比较请求头里的"),v("code",[t._v("If-Modified-Since")]),t._v("和文件的上次修改时间。如果果一致就继续使用本地缓存（304），如果不一致就再次返回文件内容和Last-Modified。")]),t._v(" "),v("li",[t._v("循环请求。。")])]),t._v(" "),v("h5",{attrs:{id:"缺点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[t._v("#")]),t._v(" 缺点")]),t._v(" "),v("ul",[v("li",[t._v("由于Last-Modified修改时间是GMT时间，只能精确到秒，如果文件在1秒内有多次改动，服务器并不知道文件有改动，浏览器拿不到最新的文件")]),t._v(" "),v("li",[t._v("如果服务器上文件被多次修改了但是内容却没有发生改变，服务器需要再次重新返回文件。")])]),t._v(" "),v("p",[t._v("为了解决文件修改时间不精确带来的问题，服务器和浏览器再次协商，这次不返回时间，返回文件的唯一标识ETag。只有当文件内容改变时，ETag才改变。")]),t._v(" "),v("h5",{attrs:{id:"etag-资源文件的一个唯一标识-由服务器生成"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#etag-资源文件的一个唯一标识-由服务器生成"}},[t._v("#")]),t._v(" ETag：资源文件的一个唯一标识(由服务器生成)")]),t._v(" "),v("ul",[v("li",[t._v("浏览器请求静态资源")]),t._v(" "),v("li",[t._v("服务器返回资源给浏览器，同时带上文件的唯一标识ETag")]),t._v(" "),v("li",[t._v("当浏览器上的缓存文件过期时或者从新发起该请求，浏览器带上请求头"),v("code",[t._v("If-None-Match")]),t._v("（等于上一次请求的ETag）请求服务器")]),t._v(" "),v("li",[t._v("服务器比较请求头里的"),v("code",[t._v("If-None-Match")]),t._v("和文件的ETag。如果一致就继续使用本地缓存（304），如果不一致就再次返回文件内容和ETag。")]),t._v(" "),v("li",[t._v("循环请求。。")])]),t._v(" "),v("h4",{attrs:{id:"http与https的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http与https的区别"}},[t._v("#")]),t._v(" HTTP与HTTPS的区别")]),t._v(" "),v("h5",{attrs:{id:"http"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[t._v("#")]),t._v(" HTTP")]),t._v(" "),v("ul",[v("li",[t._v("HTTP的URL开头是http://")]),t._v(" "),v("li",[t._v("HTTP的默认端口是80")]),t._v(" "),v("li",[t._v("HTTP是超文本传输协议，信息是明文传输，不太安全")]),t._v(" "),v("li",[t._v("HTTP不需要证书")])]),t._v(" "),v("h5",{attrs:{id:"https"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#https"}},[t._v("#")]),t._v(" HTTPS")]),t._v(" "),v("ul",[v("li",[t._v("HTTPS的URL是https://")]),t._v(" "),v("li",[t._v("HTTPS的默认端口是443")]),t._v(" "),v("li",[t._v("HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比较安全")]),t._v(" "),v("li",[t._v("HTTPS需要CA机构颁发的SSL证书")])]),t._v(" "),v("h4",{attrs:{id:"http状态码"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http状态码"}},[t._v("#")]),t._v(" HTTP状态码")]),t._v(" "),v("p",[v("strong",[t._v("1xx表示客户端应该继续发送请求")])]),t._v(" "),v("p",[v("strong",[t._v("2xx表示成功的请求")])]),t._v(" "),v("ul",[v("li",[t._v("200表示OK，正常返回信息")]),t._v(" "),v("li",[t._v("201表示请求成功且服务器创建了新的资源")]),t._v(" "),v("li",[t._v("202表示服务器已经接受了请求，但还未处理")])]),t._v(" "),v("p",[v("strong",[t._v("3xx表示重定向")])]),t._v(" "),v("ul",[v("li",[t._v("301表示永久重定向，请求的网页已经永久移动到新位置")]),t._v(" "),v("li",[t._v("302表示临时重定向")]),t._v(" "),v("li",[t._v("304表示自从上一次请求以来，页面的内容没有改变过")])]),t._v(" "),v("p",[v("strong",[t._v("4xx表示客户端错误")])]),t._v(" "),v("ul",[v("li",[t._v("401表示服务器无法理解请求的格式")]),t._v(" "),v("li",[t._v("402表示请求未授权")]),t._v(" "),v("li",[t._v("403表示禁止访问")]),t._v(" "),v("li",[t._v("404表示请求的资源不存在，一般是路径写错了")])]),t._v(" "),v("p",[v("strong",[t._v("5xx表示服务器错误")])]),t._v(" "),v("ul",[v("li",[t._v("500表示最常见的服务器错误")]),t._v(" "),v("li",[t._v("503表示服务器暂时无法处理请求")])]),t._v(" "),v("h4",{attrs:{id:"get和post的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#get和post的区别"}},[t._v("#")]),t._v(" GET和POST的区别")]),t._v(" "),v("p",[t._v("1.GET在浏览器回退不会再次请求，POST会再次提交请求")]),t._v(" "),v("p",[t._v("2.GET请求会被浏览器主动缓存，POST不会，要手动设置")]),t._v(" "),v("p",[t._v("3.GET请求参数会被完整保留在浏览器历史记录里，POST中的参数不会")]),t._v(" "),v("p",[t._v("4.GET请求在URL中传送的参数是有长度限制的，而POST没有限制")]),t._v(" "),v("p",[t._v("5.GET参数通过URL传递，POST放在Request body中")]),t._v(" "),v("p",[t._v("6.GET参数暴露在地址栏不安全，POST放在报文内部更安全")]),t._v(" "),v("p",[t._v("7.GET一般用于查询信息，POST一般用于提交某种信息进行某些修改操作")]),t._v(" "),v("p",[t._v("8.GET产生一个TCP数据包；POST产生两个TCP数据包")])])}),[],!1,null,null,null);v.default=s.exports}}]);